---
import HeartIcon from '@components/icons/Heart.astro';
import SendIcon from '@components/icons/Send.astro';
import SkillItem from '@components/elements/SkillItem.astro';
import { getCollection } from "astro:content";

const { t } = Astro.props;
const currentLocale = Astro.currentLocale;

const ALTERHEROS = await getCollection('heros');
const heros_filter = ALTERHEROS.filter(hero => hero.id.includes(currentLocale + '/'));
const heros = heros_filter.map(hero => hero.data);
const SOCIALMEDIA = [
	{name:'linkedin', link: 'https://www.linkedin.com/in/pmalc/', target:'_blank'},
	{name:'github', link:'https://www.github.com/pmalc', target:'_blank'},
	{name:'email', link:'mailto:pmalc990@gmail.com', target: ''},
	{name:'cv', link:'/curriculum.pdf', target:'_blank'},
];
const currentHero = 0;

---

<section id="alterhero" class="relative h-max -top-20 w-full" data-currenthero={heros[currentHero].hero} data-index={currentHero}>
	<div id="background" class={heros[currentHero].bg + " absolute h-[575px] top-20 md:h-[900px] md:top-20 lg:h-[620px] lg:top-20 fondo w-full bg-white/95 bg-blend-overlay dark:bg-neutral-800  bg-cover bg-no-repeat bg-center"}>
	</div>
	<div class="hero-section lg:w-[85%] xl:w-[80% ] max-w-6xl mx-auto pt-48 flex flex-row justify-start items-start relative top-0 right-0 left-0">
		<div class="flex flex-col lg:flex-row justify-start lg:justify-between gap-10 2xl:gap-12 items-center w-full mx-auto">
			<div class="flex flex-col justify-start items-start cursor-default w-[90%] md:w-[85%] max-lg:mx-auto lg:w-3/5 xl:2/3 2xl:w-2/3 gap-3">
				<div class="flex flex-col justify-center items-center lg:items-start max-lg:mx-auto lg:w-full">
					<h1 id="name" class="font-bold sm:font-extrabold text-center lg:text-left text-4xl sm:text-[44px] md:text-5xl lg:text-[2.5rem] xl:text-[3.4rem] xl:font-bold 2xl:text-6xl 2xl:font-extrabold border-b-4 border-neutral-600 dark:border-white py-2">
						<span class="first-letter:color-primary">{t.globals.name}</span>
						<span class="first-letter:color-primary">{t.globals.surname1}</span>
						<span class="first-letter:color-primary">{t.globals.surname2}</span>
					</h1>
					{heros.map(alterhero => (
						<h2 id={"title-" + alterhero.hero} class="text-xl sm:text-2xl text-center lg:text-left w-full xl:text-3xl uppercase font-bold py-2 tracking-widest bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent hidden">
							{alterhero.title}
						</h2>
					))}
				</div>
				{heros.map(alterhero => (
					<p id={"description-" + alterhero.hero} class="text-center lg:text-left text-sm sm:text-md xl:text-[1rem] text-neutral-400 dark:text-neutral-50 font-light tracking-wide leading-8 hidden">{alterhero.description}</p>
				))}
				<ul class="flex flex-row mx-auto justify-between lg:justify-start gap-3 sm:gap-4 lg:gap-2 xl:gap-4 w-[90%] lg:w-full dark:text-neutral-800">
					{SOCIALMEDIA.map(social => (
						<SkillItem skill={social.name} t={t} mode="horizontal" link={social.link} target={social.target} withlabelxs="true"/>
					))}
				</ul>
			</div>
			<div class="relative w-[80%] md:w-[70%] lg:w-2/5 xl:w-1/3 2xl:w-1/3">
				<div class="relative w-[75%] sm:w-[60%] md:w-[55%] sm:left-15 md:left-25 lg:w-[75%] lg:left-0 rotate-6 px-5 lg:px-4 lg:pt-5 lg:pb-4 pt-6 pb-5 xl:pb-10 bg-white dark:bg-neutral-700 border-4 dark:border-3 border-primary dark:border-accent shadow-neutral-400 dark:shadow-neutral-900 shadow-xl z-50">
					{heros.map(alterhero => (
						<img id={"image-" + alterhero.hero} src={alterhero.image} alt={alterhero.title} class="w-full mb-2 hidden dark:border-3 dark:border-white"/>
					))}
					<footer class="flex flex-col justify-center items-center">
						<ul class="flex flex-row justify-center items-center w-full gap-3 cursor-pointer h-3 mt-3 mb-4">
							{heros.map((alterelem, index) => (
								<li data-hero={alterelem.hero} data-index={index} class="nav-img bg-neutral-200 dark:bg-white hover:bg-primary dark:hover:bg-accent rounded-full size-2"></li>
							))}
						</ul>
						<div class="flex flex-row w-full justify-between">
							<div class="flex flex-row justify-center items-center gap-2">
								<HeartIcon class="size-6 cursor-pointer hover:fill-primary dark:fill-white dark:hover:fill-accent"/>
								{heros.map(alterhero => (
									<span id={"footer-likes-" + alterhero.hero} class="hidden">{alterhero.likes}</span>
								))}
								<span>{t.globals.likes}</span>
							</div>
							<div>
								<SendIcon id="sendIcon" class="fill-white stroke-neutral-800 dark:stroke-white dark:fill-neutral-700 size-6 cursor-pointer hover:stroke-primary dark:hover:stroke-accent"/>
							</div>
						</div>
						<div class="flex flex-row w-full justify-start">
							{heros.map(alterhero => (
								<span id={"footer-title-" + alterhero.hero} class="text-sm footer-title text-neutral-400 dark:text-white pt-2 tracking-wide hidden">{alterhero.title}</span>
							))}
						</div>
					</footer>
				</div>
				<div class="absolute w-[80%] sm:w-[60%] md:w-[55%] lg:w-[75%] top-[53%] right-0 sm:right-10 md:right-15 lg:right-0 z-20">
					<ul id="list-buttons" class="w-full rotate-6">
						<div class="circle relative m-auto w-full h-full transition duration-300">
							{heros.map((alterelem, index) => (
								<li data-hero={alterelem.hero} data-index={index} class={"absolute w-[32%] md:w-[35%] p-2 button-alter cursor-pointer top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 transition duration-300"} style="transform: rotate(0deg)">
									<img src={alterelem.image} alt={alterelem.title} class="img-hero rounded-full hover:scale-[1.1] transition"/>
								</li>
							))}
						</div>
					</ul>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	@reference "@styles/global.css";

	.fondo{
		mask-image: linear-gradient(#fff 90%, transparent);
	}

	html[data-theme="dark"] .fondo{
		mask-image: linear-gradient(#33333344 80%, transparent);
	}

	.img-hero{
		mask-image: radial-gradient(
			circle at center in hsl shorter hue,
			#FFFFFF 40%,
			#FFFFFF33 55%,
			transparent 60%
		);
	}

	html[data-theme="dark"] .img-hero{
		mask-image: radial-gradient(
			circle at center in hsl shorter hue,
			#333333 50%,
			#33333322 65%,
			transparent 70%
		);
	}

	.nav-img.active{
		@apply bg-primary dark:bg-accent size-3;
	}

	.bg-pma-dev{
		background-image: url('/heros/developer-full-180.png');
	}

	.bg-pma-dancer{
		background-image: url('/heros/pma-dancer.png');
	}

	.bg-pma-reader{
		background-image: url('/heros/pma-reader.png');
	}

	.bg-pma-traveler{
		background-image: url('/heros/pma-traveler.png');
	}
	.bg-pma-gamer{
		background-image: url('/heros/pma-gamer.png');
	}

	.bg-pma-catlover{
		background-image: url('/heros/pma-catlover.png');
	}

</style>

<script is:inline>
	const currentHero = document.getElementById('alterhero');
	const buttonsAlter = document.getElementsByClassName("button-alter");
	const circle = document.querySelector('.circle');
	const navImgs = document.querySelectorAll('.nav-img');
	const sendIcon = document.getElementById('sendIcon');

	function duplicateItems(){
		Array.prototype.forEach.call(buttonsAlter, (button, index) => {
			const duplicatedItem = button.cloneNode(true);
			duplicatedItem.setAttribute("aria-hidden", true);
			duplicatedItem.dataset.index = index + 6;
			circle.appendChild(duplicatedItem);
		});
	}

	function drawCircle(){
		const circle = document.querySelector('.circle');
		const radius = circle.offsetWidth / 2;
		const n = buttonsAlter.length;
		const angle = 360 / n;
		const offset = -90;
		Array.prototype.forEach.call(buttonsAlter, (button, index) => {
			const x = radius * Math.cos((angle * index + offset) * Math.PI / 180);
			const y = radius * Math.sin((angle * index + offset) * Math.PI / 180);
			button.style.transform = `translate(${x}px, ${y}px)`;
		});
		rotateCircleRight(currentHero.dataset.index);
	}

	function changeHero(hero, index, isHidden) {
		document.getElementById('background').classList[!isHidden ? 'add': 'remove']('bg-pma-' + hero);
		document.getElementById('title-' + hero).classList[!isHidden ? 'remove': 'add']('hidden');
		document.getElementById('description-' + hero).classList[!isHidden ? 'remove': 'add']('hidden');
		document.getElementById('image-' + hero).classList[!isHidden ? 'remove': 'add']('hidden');
        document.getElementById('footer-title-' + hero).classList[!isHidden ? 'remove': 'add']('hidden');
		document.getElementById('footer-likes-' + hero).classList[!isHidden ? 'remove': 'add']('hidden');

		if(hero !== currentHero.dataset.currenthero){
			currentHero.dataset.currenthero = hero;
			currentHero.dataset.index = index;
		}

		navImgs.forEach(navImg => {
			(navImg.dataset.hero === currentHero.dataset.currenthero) ? navImg.classList.add('active'): navImg.classList.remove('active');
		});
	}

	function rotateCircleRight(index){
		const angle = 360 / buttonsAlter.length;
		const currentIndex = parseInt(currentHero.dataset.index);
		let diff = Math.abs(index - currentIndex);
		if(currentIndex > 6 && index < 6){
			diff = 12 - currentIndex + index;
		}
		for(let i = 0; i < diff; i++){
			circle.style.transform += `rotate(-${angle}deg)`;
			Array.prototype.forEach.call(buttonsAlter, (button, index) => {
				button.style.transform += `rotate(${angle}deg)`;
			});
		}
	}

	function rotateCircleBoth(index){
		const angle = 360 / buttonsAlter.length;
		const currentIndex = parseInt(currentHero.dataset.index);
		if(currentIndex >= 6){
			index += 6;
		}
		const diff = index - currentIndex;
		const directionCircle = diff < 0 ? angle : (-1 * angle);
		const directionButton = diff < 0 ? (-1 * angle) : angle;
		for(let i = 0; i < Math.abs(diff); i++){
			circle.style.transform += `rotate(${directionCircle}deg)`;
			Array.prototype.forEach.call(buttonsAlter, (button) => {
				button.style.transform += `rotate(${directionButton}deg)`;
			});
		}
	}

	function eventButtons(){
        Array.prototype.forEach.call(buttonsAlter, (button, index) => {
			button.index = index;
            button.addEventListener('click', (e) => {
				rotateCircleRight(e.currentTarget.index);
				changeHero(currentHero.dataset.currenthero, currentHero.dataset.index, true);
                changeHero(button.dataset.hero, button.dataset.index, false);
            });
        });

		Array.prototype.forEach.call(navImgs, navImg  => {
			navImg.addEventListener('click', (e) => {
				rotateCircleBoth(navImg.dataset.index);
				changeHero(currentHero.dataset.currenthero,currentHero.dataset.index, true);
				changeHero(navImg.dataset.hero, navImg.dataset.index, false);
			});
		});

		sendIcon.addEventListener('click', (e) => {
			const contact = document.getElementById('contact');
			contact.scrollIntoView({behavior: "smooth", block:"start", inline: "nearest"});
		});
    }

	duplicateItems();
	drawCircle();
	changeHero('dev', currentHero.dataset.index);
	eventButtons();

	window.addEventListener('resize', () => {
		drawCircle();
	});

</script>
